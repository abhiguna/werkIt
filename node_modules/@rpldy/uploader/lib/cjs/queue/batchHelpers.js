"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIsBatchFinalized = exports.incrementBatchFinishedCounter = exports.removePendingBatches = exports.preparePendingForUpload = exports.detachRecycledFromPreviousBatch = exports.getBatchFromState = exports.getIsItemBatchReady = exports.triggerUploaderBatchEvent = exports.cleanUpFinishedBatches = exports.getBatchDataFromItemId = exports.isItemBelongsToBatch = exports.getBatchFromItemId = exports.cancelBatchForItem = exports.isNewBatchStarting = exports.loadNewBatchForItem = void 0;

var _shared = require("@rpldy/shared");

var _simpleState = require("@rpldy/simple-state");

var _consts = require("../consts");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BATCH_READY_STATES = [_shared.BATCH_STATES.ADDED, _shared.BATCH_STATES.PROCESSING, _shared.BATCH_STATES.UPLOADING];
var BATCH_FINISHED_STATES = [_shared.BATCH_STATES.ABORTED, _shared.BATCH_STATES.CANCELLED, _shared.BATCH_STATES.FINISHED];

var getBatchFromState = function (state, id) {
  return state.batches[id].batch;
};

exports.getBatchFromState = getBatchFromState;

var getBatch = function (queue, id) {
  return getBatchFromState(queue.getState(), id);
};

var isItemBelongsToBatch = function (queue, itemId, batchId) {
  return queue.getState().items[itemId].batchId === batchId;
};

exports.isItemBelongsToBatch = isItemBelongsToBatch;

var getBatchDataFromItemId = function (queue, itemId) {
  var state = queue.getState();
  var item = state.items[itemId];
  return state.batches[item.batchId];
};

exports.getBatchDataFromItemId = getBatchDataFromItemId;

var getBatchFromItemId = function (queue, itemId) {
  return getBatchDataFromItemId(queue, itemId).batch;
};

exports.getBatchFromItemId = getBatchFromItemId;

var removeBatchItems = function (queue, batchId) {
  var batch = getBatch(queue, batchId);
  queue.updateState(function (state) {
    batch.items.forEach(function (_ref) {
      var id = _ref.id;
      delete state.items[id];
      var index = state.itemQueue.indexOf(id);

      if (~index) {
        state.itemQueue.splice(index, 1);
      }
    });
  });
};

var removeBatch = function (queue, batchId) {
  queue.updateState(function (state) {
    delete state.batches[batchId];
  });
};

var cancelBatchForItem = function (queue, itemId) {
  var batch = getBatchFromItemId(queue, itemId),
      batchId = batch.id;

  _shared.logger.debugLog("uploady.uploader.batchHelpers: cancelling batch: ", {
    batch: batch
  });

  queue.updateState(function (state) {
    var batch = getBatchFromState(state, batchId);
    batch.state = _shared.BATCH_STATES.CANCELLED;
  });
  triggerUploaderBatchEvent(queue, batchId, _consts.UPLOADER_EVENTS.BATCH_CANCEL);
  removeBatchItems(queue, batchId);
  removeBatch(queue, batchId);
};

exports.cancelBatchForItem = cancelBatchForItem;

var isNewBatchStarting = function (queue, itemId) {
  var batch = getBatchFromItemId(queue, itemId);
  return queue.getState().currentBatch !== batch.id;
};

exports.isNewBatchStarting = isNewBatchStarting;

var loadNewBatchForItem = function (queue, itemId) {
  var batch = getBatchFromItemId(queue, itemId);
  return queue.runCancellable(_consts.UPLOADER_EVENTS.BATCH_START, batch).then(function (isCancelled) {
    if (!isCancelled) {
      queue.updateState(function (state) {
        state.currentBatch = batch.id;
      });
    }

    return !isCancelled;
  });
};

exports.loadNewBatchForItem = loadNewBatchForItem;

var cleanUpFinishedBatches = function (queue) {
  //TODO: schedule clean up on requestAnimationFrame
  var state = queue.getState();
  Object.keys(state.batches).forEach(function (batchId) {
    var _state$batches$batchI = state.batches[batchId],
        batch = _state$batches$batchI.batch,
        finishedCounter = _state$batches$batchI.finishedCounter;
    var orgItemCount = batch.orgItemCount; //shouldnt be the case, but if wasnt cleaned before, it will now

    var alreadyFinalized = getIsBatchFinalized(batch);

    if (orgItemCount === finishedCounter) {
      queue.updateState(function (state) {
        var batch = getBatchFromState(state, batchId); //set batch state to FINISHED before triggering event and removing it from queue

        batch.state = alreadyFinalized ? batch.state : _shared.BATCH_STATES.FINISHED;

        if (state.currentBatch === batchId) {
          state.currentBatch = null;
        }
      });

      _shared.logger.debugLog("uploady.uploader.batchHelpers: cleaning up batch: ".concat(batch.id));

      if (!alreadyFinalized) {
        triggerUploaderBatchEvent(queue, batchId, _consts.UPLOADER_EVENTS.BATCH_FINISH);
      }

      removeBatchItems(queue, batchId);
      removeBatch(queue, batchId);
    }
  });
};

exports.cleanUpFinishedBatches = cleanUpFinishedBatches;

var triggerUploaderBatchEvent = function (queue, batchId, event) {
  var state = queue.getState(),
      batch = getBatchFromState(state, batchId),
      //get the most uptodate batch data
  stateItems = state.items;

  var eventBatch = _objectSpread(_objectSpread({}, (0, _simpleState.unwrap)(batch)), {}, {
    items: batch.items.map(function (_ref2) {
      var id = _ref2.id;
      return (0, _simpleState.unwrap)(stateItems[id]);
    })
  });

  queue.trigger(event, eventBatch);
};

exports.triggerUploaderBatchEvent = triggerUploaderBatchEvent;

var getIsItemBatchReady = function (queue, itemId) {
  var batch = getBatchFromItemId(queue, itemId);
  return BATCH_READY_STATES.includes(batch.state);
};

exports.getIsItemBatchReady = getIsItemBatchReady;

var detachRecycledFromPreviousBatch = function (queue, item) {
  var previousBatch = item.previousBatch;

  if (item.recycled && previousBatch && queue.getState().batches[previousBatch]) {
    var _getBatchFromItemId = getBatchFromItemId(queue, item.id),
        batchId = _getBatchFromItemId.id;

    if (batchId === previousBatch) {
      queue.updateState(function (state) {
        var batch = getBatchFromState(state, batchId);
        var index = batch.items.findIndex(function (_ref3) {
          var id = _ref3.id;
          return id === item.id;
        });

        if (~index) {
          batch.items.splice(index, 1);
        }
      });
    }
  }
};

exports.detachRecycledFromPreviousBatch = detachRecycledFromPreviousBatch;

var preparePendingForUpload = function (queue, uploadOptions) {
  queue.updateState(function (state) {
    //remove pending state from pending batches
    Object.keys(state.batches).forEach(function (batchId) {
      var batchData = state.batches[batchId];
      var batch = batchData.batch,
          batchOptions = batchData.batchOptions;

      if (batch.state === _shared.BATCH_STATES.PENDING) {
        batch.items.forEach(function (item) {
          item.state = _shared.FILE_STATES.ADDED;
        });
        batch.state = _shared.BATCH_STATES.ADDED;
        batchData.batchOptions = (0, _shared.merge)({}, batchOptions, uploadOptions);
      }
    });
  });
};

exports.preparePendingForUpload = preparePendingForUpload;

var removePendingBatches = function (queue) {
  var batches = queue.getState().batches;
  Object.keys(batches).filter(function (batchId) {
    return batches[batchId].batch.state === _shared.BATCH_STATES.PENDING;
  }).forEach(function (batchId) {
    removeBatchItems(queue, batchId);
    removeBatch(queue, batchId);
  });
};

exports.removePendingBatches = removePendingBatches;

var incrementBatchFinishedCounter = function (queue, batchId) {
  queue.updateState(function (state) {
    state.batches[batchId].finishedCounter += 1;
  });
};

exports.incrementBatchFinishedCounter = incrementBatchFinishedCounter;

var getIsBatchFinalized = function (batch) {
  return BATCH_FINISHED_STATES.includes(batch.state);
};

exports.getIsBatchFinalized = getIsBatchFinalized;