var _ITEM_STATE_ABORTS;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { BATCH_STATES, FILE_STATES, logger } from "@rpldy/shared";
import { UPLOADER_EVENTS } from "../consts";
import { triggerUploaderBatchEvent, getBatchFromState, getIsBatchFinalized } from "./batchHelpers";
import processFinishedRequest from "./processFinishedRequest";

var abortNonUploadingItem = function (queue, item, next) {
  logger.debugLog("uploader.queue: aborting ".concat(item.state, " item  - "), item); //manually finish request for item that hasnt reached the sender yet

  processFinishedRequest(queue, [{
    id: item.id,
    info: {
      status: 0,
      state: FILE_STATES.ABORTED,
      response: "aborted"
    }
  }], next);
  return true;
};

var ITEM_STATE_ABORTS = (_ITEM_STATE_ABORTS = {}, _defineProperty(_ITEM_STATE_ABORTS, FILE_STATES.UPLOADING, function (queue, item) {
  logger.debugLog("uploader.queue: aborting uploading item  - ", item);
  return queue.getState().aborts[item.id]();
}), _defineProperty(_ITEM_STATE_ABORTS, FILE_STATES.ADDED, abortNonUploadingItem), _defineProperty(_ITEM_STATE_ABORTS, FILE_STATES.PENDING, abortNonUploadingItem), _ITEM_STATE_ABORTS);

var callAbortOnItem = function (queue, id, next) {
  var state = queue.getState(),
      item = state.items[id],
      itemState = item === null || item === void 0 ? void 0 : item.state; //$FlowIssue[prop-missing]

  return ITEM_STATE_ABORTS[itemState] ? //$FlowExpectedError[extra-arg]
  //$FlowIssue[prop-missing]
  ITEM_STATE_ABORTS[itemState](queue, item, next) : false;
};

var abortAll = function (queue, next) {
  var items = queue.getState().items;
  Object.keys(items).forEach(function (id) {
    return callAbortOnItem(queue, id, next);
  });
  queue.trigger(UPLOADER_EVENTS.ALL_ABORT);
};

var abortItem = function (queue, id, next) {
  return callAbortOnItem(queue, id, next);
};

var abortBatch = function (queue, id, next) {
  var state = queue.getState(),
      batchData = state.batches[id],
      batch = batchData === null || batchData === void 0 ? void 0 : batchData.batch;

  if (batch && !getIsBatchFinalized(batch)) {
    queue.updateState(function (state) {
      getBatchFromState(state, id).state = BATCH_STATES.ABORTED;
    });
    triggerUploaderBatchEvent(queue, id, UPLOADER_EVENTS.BATCH_ABORT);
    batch.items.forEach(function (bi) {
      return callAbortOnItem(queue, bi.id, next);
    });
  }
};

export { abortAll, abortItem, abortBatch };